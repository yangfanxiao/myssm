<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	                       http://www.springframework.org/schema/beans/spring-beans.xsd
	                       http://www.springframework.org/schema/context 
	                       http://www.springframework.org/schema/context/spring-context.xsd
	                       http://www.springframework.org/schema/tx 
	                       http://www.springframework.org/schema/tx/spring-tx-3.0.xsd  
	                      http://www.springframework.org/schema/aop 
	                      http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
	                       http://www.springframework.org/schema/mvc
       					   http://www.springframework.org/schema/mvc/spring-mvc.xsd">  
    <!-- 自动扫描 -->  
    <context:component-scan base-package="com.yitianyike" />  
    <!-- 引入jdbc 配置文件 -->  
    <bean id="propertyConfigurer"  
        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
        <property name="location" value="classpath:/properties/jdbc.properties" />  
    </bean>  
  
    <bean id="dataSourceA" class="org.apache.commons.dbcp.BasicDataSource"  
        destroy-method="close">  
<!--         数据库驱动字符串 -->
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<!-- JDBC URL字符串 -->
		<property name="url" value="${jdbc.jdbcurl}" />
		<!-- 数据库用户名 -->
		<property name="username" value="${jdbc.user}" />
		<!-- 数据库密码 -->
		<property name="password" value="${jdbc.password}" />
    </bean>  
  
  <bean id="dataSourceB" class="org.apache.commons.dbcp.BasicDataSource"  
        destroy-method="close">  
<!--         数据库驱动字符串 -->
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<!-- JDBC URL字符串 -->
		<property name="url" value="${jdbc.jdbcurl2}" />
		<!-- 数据库用户名 -->
		<property name="username" value="${jdbc.user2}" />
		<!-- 数据库密码 -->
		<property name="password" value="${jdbc.password2}" />
    </bean> 
    
    <bean id="dataSourceC" class="org.apache.commons.dbcp.BasicDataSource"  
        destroy-method="close">  
<!--         数据库驱动字符串 -->
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<!-- JDBC URL字符串 -->
		<property name="url" value="${jdbc.jdbcurl3}" />
		<!-- 数据库用户名 -->
		<property name="username" value="${jdbc.user3}" />
		<!-- 数据库密码 -->
		<property name="password" value="${jdbc.password3}" />
    </bean> 
     <bean id="dataSource" class="com.yitianyike.myssm.common.DynamicDataSource">
        <property name="targetDataSources">
            <map key-type="java.lang.String">
                <entry value-ref="dataSourceA" key="dataSourceA"></entry>
                <entry value-ref="dataSourceB" key="dataSourceB"></entry>
                <entry value-ref="dataSourceC" key="dataSourceC"></entry>
            </map>
        </property>
        <property name="defaultTargetDataSource" ref="dataSourceA"></property>
    </bean>
     
    <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->  
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
        <property name="dataSource" ref="dataSource" />  
        <!-- 自动扫描mapping.xml文件 -->  
        <property name="mapperLocations" value="classpath:mybatis/mapper/*.xml"></property>  
    </bean>  
    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->  
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
        <property name="basePackage" value="com.yitianyike.myssm.dao" />  
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>  
    </bean>  
  
  <!-- 配置事务管理 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 注解式事务配置
	<tx:annotation-driven transaction-manager="transactionManager" />
	-->
	
	<!-- 事务相关控制配置：例如配置事务的传播机制 -->
    <tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
		 	<tx:method name="insert*"/>
		 	<tx:method name="update*"/>
		 	<tx:method name="delete*"/>
		 	<tx:method name="del*"/>
		 	<tx:method name="replace*"/>
		 	<tx:method name="create*"/>
	<!-- 		<tx:method name="*"  read-only="true" propagation="REQUIRED"/>		 -->
			<tx:method name="process*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>
	
    <!-- 把事务控制在service.impl层 -->
	<aop:config>
		<aop:pointcut id="transactionPointcut" expression="execution(* com.yitianyike.calendar.service.impl.*.*(..))" />
		<aop:advisor pointcut-ref="transactionPointcut" advice-ref="transactionAdvice" />
	</aop:config>
</beans>  